#!/bin/bash
echo "Usage: $0 [namespace (default=dev)] [pod-pull-policy (always/debug/default=unchanged)] (dryrun)"
owner="tmc"
    

  pathset=$(echo $PWD | tr "/" "\n")
  for x in $pathset
  do
    currentpath=$x
  done
  fs=${currentpath//.yml/}

MOD="${currentpath/-deployment/}"
LG='\033[1;30m'
H='\033[1;33m'
T='\033[0;36m'
J='\033[0;35m'
NC='\033[0m' # No Color

#  fileset=$(echo $currentpath | tr "typ-" "\n")
#  for x in $fileset
#  do
#    MOD=$x
#  done


if [ ! -f "$fs.yml" ]
then
    echo "$0: File '${fs}.yml' not found."
    exit
fi


if [ -z $1 ]
then
    ns=dev
else
    ns=$1
fi


echo -e "${J}Checking for ${fs}.${ns}.yml....${NC}"
if [ -f "${fs}.${ns}.yml" ]
then
    fs=${fs}.${ns}
    echo -e "Found file '${H}${fs}${T}' for namespace '${H}${ns}${T}'"
else
    echo -e "Notfound..."    
fi


if [[ $3 == "dryrun" ]]
then
    echo "${T}Running in dry-run mode...${NC}"
fi

update=`date +%y%m%d-%H%I%S`

latestx=`docker image list|grep docker|grep ${owner}/${MOD}|awk -F " " ' { print $2 }' |awk -F "." ' {printf("%d%02d\n",$1,$2)}' |sort  -nk1 -r|sed 's/\([0-9]\{8\}\)0\?\([0-9]\+\)/\1.\2/g'|head -n1`
echo "s/UPDATE/${update}/g" > sedtmp
echo "s/TAG/${latestx}/g" >> sedtmp

if [[ $2 == "always" ]]
then
    echo -e "${T}All pods pull policy is set to *** ${H}Always${T} ***...${NC}"
    echo "s/IfNotPresent/Always/g" >> sedtmp
else
    if [[ $2 == "debug" ]]   
    then
        echo -e "${T}Enabled ${H}debug+always${T} mode ***...${NC}"
        echo "s/-DEBUG/-debug/g" >> sedtmp
        echo "s/IfNotPresent/Always/g" >> sedtmp        
    else
         echo "s/-DEBUG//g" >> sedtmp
     fi
fi

echo ""
echo -e "${T}Finding all tags of ${H}$owner/${MOD}${NC}"
echo -e "${LG}-----------------------------------------------------------------------${NC}"
i=0
while
    latest=`docker image list|grep docker|grep $owner/${MOD}-${i}|awk -F " " ' { print $2 }' |awk -F "." ' {printf("%d%02d\n",$1,$2)}' |sort  -nk1 -r|sed 's/\([0-9]\{8\}\)0\?\([0-9]\+\)/\1.\2/g'|head -n1`
    lts[$i]=$latest
    if [[ $latest != "" ]]
    then
        echo "Found $owner/${MOD}-${i} = $latest"
        echo "s/TG${i}/${lts[$i]}/g" >> sedtmp
    fi
    ((i=i+1))
    [[ $latest != "" ]]
do :; done
echo ""

if [[ $ns == 'dev' ]]
then
    echo -e "${T}Applying ${H}$fs.yml${NC}${T} of ${H}${MOD}${T} TAG=${H}$latestx${NC} to Kubernetes Namespace ${H}$ns${NC} ${T}(1 Replica)"
    echo -e "${T}TG#=${H}${lts[@]}${NC}"
    echo -e "${LG}-----------------------------------------------------------------------${NC}"
    echo "s/DaemonSet/Deployment/g" >> sedtmp
    echo "s/replicas: [0-9]/replicas: 1/g" >> sedtmp
    echo "s/cpu\:.*/cpu: 0.2/g" >> sedtmp
    echo "s/memory\:.*/memory: 500Mi/g" >> sedtmp
#    awk 'BEGIN{ print_flag=1 } 
#    {
#        if( $0 ~ /resources:/ ) 
#        {
#           print_flag=0;
#           next
#        } 
#        if( $0 ~ /^        [a-zA-Z0-9]+:\s*$/ ) 
#        {
#            print_flag=1;   
#        } 
#        if ( print_flag == 1 ) 
#            print $0
#
#    } ' typ-yp.yml
else
    echo -e "${T}Applying ${H}$fs.yml${NC}${T} TAG=${H}$latestx${NC} to Kubernetes Namespace ${H}$ns${NC} "
    echo -e "${T}TG#=${H}${lts[@]}${NC}"    
    echo -e "${LG}-----------------------------------------------------------------------${NC}"
fi

if [[ $3 == 'dryrun' ]];
then
    sed -f sedtmp ${fs}.yml
else

    echo -e "${T}Backup ${H}generated.yml${NC}${T} to ${H}backup/${update}.yml${NC}"
    echo -e "${LG}-----------------------------------------------------------------------${NC}"

    mkdir -p backup
    cp generated.yml backup/${update}.yml

    sed -f sedtmp ${fs}.yml > generated.yml
    echo -e "${J}"
    kubectl apply -n$ns -f generated.yml
    echo -e "${NC}"
fi
echo ""
#echo /tmp/sedtmp
#rm /tmp/sedtmp
echo -e "${T}Exposing service ${H}$fs${NC}"
echo -e "${LG}-----------------------------------------------------------------------${NC}"
kubectl expose service/$fs -n$ns
echo 
echo -e "${T}Status${NC}"
echo -e "${LG}-----------------------------------------------------------------------${NC}"
kubectl get all --selector app=$fs -n$ns
echo ""
kubectl describe endpoints $fs -n$ns
echo 
