#!/bin/bash
#http://www.abrandao.com/2014/01/linux-backup-and-rotate-script/
#########################
# Backups to DESTINATION_FOLDER / Zips and performs basic rotation
##########################
echo ""
SOURCE_FOLDER="/source/" # source folder
DESTINATION_FOLDER="/backup/" # mounted folder
BASENAME="basename $SOURCE_FOLDER"
ROTATE_PERIOD=10
# datestamp has a formatted date
datestamp=`date +"%Y-%m-%d"`
#### Display command usage ########
usage()
{
    cat << EOF
USAGE:
backuprot [OPTIONS] /source_folder/ /destination_folder/
Back up and entire folder, creates tgz and ,
performs x day rotation of backups Must provide source anddestination folders
OPTIONS:
-p Specify Rotation period in days - default is $ROTATE_PERIOD
EXAMPLES:
backuprot -p 5 [/source_folder/] [/destination_folder/]
EOF
}

LG='\033[1;30m'
H='\033[1;33m'
T='\033[0;36m'
J='\033[0;35m'
NC='\033[0m' # No Color

#### Getopts #####
while getopts ":p:" opt; do
    case "$opt" in
        p) ROTATE_PERIOD=${OPTARG};;
        \?) echo "$OPTARG is an unknown option"
            usage
            exit 1
            ;;
    esac
done
 
shift $((OPTIND-1))
if [ -z "$1" ] || [ -z "$2" ]; then
    usage
else
    # Backup and gzip the directory
    SOURCE_FOLDER=$1
    BASENAME=`basename "$SOURCE_FOLDER"`
    PARENT_FOLDER=`dirname "${1}"`
    TGZFILE="$BASENAME-$datestamp.tgz"
    LATEST_FILE="$BASENAME-Latest.tgz"
    DESTINATION_FOLDER=$2
    echo -e "${J}Starting Backup and Rotate ${NC}"
    echo -e "${LG}-----------------------------"
    echo -e "${T}Source Folder : ${H}$SOURCE_FOLDER"
    echo -e "${T}Parent Folder : ${H}$PARENT_FOLDER"
    echo -e "${T}Target Folder : ${H}$DESTINATION_FOLDER"
    echo -e "${T}Backup file : ${H}$TGZFILE "
    echo -e "${LG}-----------------------------"
    if [ ! -d "$SOURCE_FOLDER" ] || [ ! -d "$DESTINATION_FOLDER" ] ; then
        echo "SOURCE ($SOURCE_FOLDER) or DESTINATION ($DESTINATION_FOLDER) folder doesn't exist/ or is misspelled, check & re-try."
        exit 0;
    fi
    echo -e "${T}Creating ${H}/tmp/$TGZFILE ${T}from ${H}${BASENAME} ${T}at ${H}${PARENT_FOLDER} ${T}... ${NC}"
    tar -C $PARENT_FOLDER -zcf /tmp/$TGZFILE $BASENAME
    echo -e "${T}Copying ${H}/tmp/$TGZFILE ${T}to ${H}/tmp/$LATEST_FILE ${T}... "
    cp /tmp/$TGZFILE /tmp/$LATEST_FILE
    echo -e "${T}Moving ${H}$TGZFILE ${T}-- to --> ${H}$DESTINATION_FOLDER "
    mv /tmp/$TGZFILE $DESTINATION_FOLDER
    echo -e "${T}Moving ${H}$LATEST_FILE ${T}-- to --> ${H}$DESTINATION_FOLDER "
    mv /tmp/$LATEST_FILE $DESTINATION_FOLDER
    # count the number of file(s) in the appropriate folder Rotate the logs, delete older than
    # ROTATE_PERIOD days, if their are at_least 7 backups
    FILE_COUNT=`find $DESTINATION_FOLDER -maxdepth 1 -type f | wc -l`
    echo -e "${T}Rotation period ${H}$ROTATE_PERIOD ${T}for ${H}$DESTINATION_FOLDER "
    echo -e "${H}$FILE_COUNT ${T}files found in ${H}$DESTINATION_FOLDER ${T}folder"
    echo -e "${Y}find ${H}$DESTINATION_FOLDER ${T}-mtime +${H}$ROTATE_PERIOD"
    echo -e "${LG}-----------------------------------"
    if [ $FILE_COUNT -gt $ROTATE_PERIOD ]; then
        echo -e "${T}Removing backups older than ${H}$ROTATE_PERIOD ${T}in ${H}$DESTINATION_FOLDER"
        echo -e "${T}Removing these old backup files..."
        find $DESTINATION_FOLDER -mtime +$ROTATE_PERIOD -exec rm {} \;
    else
        echo -e "${T}Only ${H}$FILE_COUNT ${T}file, NOT removing older backups in ${H}$DESTINATION_FOLDER "
    fi
fi
echo -e "${LG}----------------"
echo -e "${T}Backup_rot Complete. :"
echo -e "${T}to extract file >> tar -xzvf $TGZFILE ${NC}"
